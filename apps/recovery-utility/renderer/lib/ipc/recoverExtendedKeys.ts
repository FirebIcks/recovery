import { ipcRenderer } from 'electron';
import { recoverKeys, KeyRecoveryConfig } from '@fireblocks/extended-key-recovery';
import type { Args } from '../../../main/ipc/recoverExtendedKeys/input';

export type ExtendedKeys = {
  xpub: string;
  fpub: string;
  xprv?: string;
  fprv?: string;
};

export const recoverExtendedKeys = async (args: Args) => {
  const decFunc = async (decType: string, rsaFile: string, cipherText: string, rsaPass: string) =>
    ipcRenderer.invoke('extended-keys/decrypt', { type: decType, rsaFile, rsaPass, cipherText });

  let config;

  if (args.autoGeneratedPassphrase) {
    config = {
      rsaPass: args.rsaKeyPassphrase,
      rsaBase64: args.rsaKey,
      zipBase64: args.zip,
      mobileRsaBase64: args.mobileRsa!,
      mobileRsaPass: args.mobilePassphrase,
      recoveryPrv: args.dangerouslyRecoverPrivateKeys ?? false,
    } as KeyRecoveryConfig;
  } else {
    config = {
      rsaPass: args.rsaKeyPassphrase,
      rsaBase64: args.rsaKey,
      zipBase64: args.zip,
      mobilePass: args.mobilePassphrase!,
      recoveryPrv: args.dangerouslyRecoverPrivateKeys ?? false,
    } as KeyRecoveryConfig;
  }

  const response = await recoverKeys(config, decFunc);
  return response;
};
