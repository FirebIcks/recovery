import fs from 'fs';
import path from 'path';
import forge from 'node-forge';
import { IZipEntry } from 'adm-zip';
import { KeyRecoveryConfig, MobileKeyShare } from './types';

export const recoverAutoGeneratedPassphrase = (params: KeyRecoveryConfig, agpFile: IZipEntry): string => {
  if ('mobileRsaPath' in params || 'mobileRsaBase64' in params) {
    let rsaFileData: string;
    if (params.mobileRsaPass) {
      if ('mobileRsaPath' in params) {
        rsaFileData = Buffer.from(fs.readFileSync(path.resolve(params.mobileRsaPath!), 'utf-8')).toString('base64');
      } else if ('mobileRsaBase64' in params) {
        rsaFileData = params.mobileRsaBase64!;
      } else {
        throw Error('RSA file path or base64 content is missing');
      }
    } else if ('mobileRsaPath' in params) {
      rsaFileData = Buffer.from(fs.readFileSync(path.resolve(params.mobileRsaPath!), 'utf-8')).toString('base64');
    } else if ('mobileRsaBase64' in params) {
      rsaFileData = params.mobileRsaBase64!;
    } else {
      throw Error('RSA file path or base64 content is missing');
    }

    rsaFileData = Buffer.from(rsaFileData, 'base64').toString();

    const encryptedPassphrase: string = Buffer.from(
      (JSON.parse(agpFile.getData().toString()) as MobileKeyShare).encryptedKey,
      'hex',
    ).toString('binary');

    const privateKey = forge.pki.decryptRsaPrivateKey(rsaFileData, params.mobileRsaPass);
    const decrypted = Buffer.from(
      privateKey.decrypt(encryptedPassphrase, 'RSA-OAEP', {
        md: forge.md.sha256.create(),
        mgf1: {
          md: forge.md.sha256.create(),
        },
      }),
      'binary',
    ).toString();
    return decrypted;
  }
  throw new Error('Trying to recover autogenerated passphrase but no RSA details provided');
};
